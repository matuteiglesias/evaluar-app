Ejercicio

Lee el ejercicio cuidadosamente y escribe tu respuesta en el espacio provisto abajo.
Se tiene una matriz booleana A
de n×n y una operación conjunciónSubmatriz que toma O(1) y que dados 4 enteros i0,i1,j0,j1 devuelve la conjunción de todos los elementos en la submatriz que toma las filas i0 hasta i1 y las columnas j0 hasta j1. Formalmente: conjunciónSubmatriz(i0,i1,j0,j1)=⋀i0≤i≤i1,j0≤j≤j1A[i,j]

    Dar un algoritmo que tome tiempo estrictamente menor que O(n2)

que calcule la posición de algún false, asumiendo que hay al menos uno. Calcular y justificar la complejidad del algoritmo.
Modificar el algoritmo anterior para que cuente cuántos false hay en la matriz. Asumiendo que hay a lo sumo 5 elementos false en toda la matriz, calcular y justificar la complejidad del algoritmo.
Si obtuvo una complejidad O(n2)
en el punto anterior, mejore el algoritmo y/o el cálculo para obtener una complejidad menor. 


%%%%%%%%%%%%


que es la "conjunción" cuando dice que dados 4 enteros i0,i1,j0,j1 devuelve la conjunción de todos los elementos .. que es el simbolo ⋀? 

porque obtendria O(n2) en 2? que me estoy perdiendo para no ver que existe un tiempo menor, y.. seria n log n ? porque?


%%%%%%%%%%%%


Retroalimentación del Ejercicio
Tu Feedback

¡Hola! Voy a ayudarte a despejar tus dudas y a profundizar tu comprensión sobre estos conceptos. ¡Vamos por partes!
¿Qué es la "conjunción"?

La "conjunción" en el contexto de tu pregunta se refiere a la operación lógica AND (en español, Y). El símbolo ⋀ es precisamente el que representa esta operación en notaciones matemáticas y lógicas. Cuando aplicamos esta operación entre dos valores booleanos, el resultado es true solo si ambos valores son true; en cualquier otro caso, el resultado es false.

Por ejemplo, si tienes true ⋀ true, el resultado es true. Pero si tienes true ⋀ false o false ⋀ false, el resultado será false.

En el contexto de tu ejercicio, la función conjunciónSubmatriz(i0, i1, j0, j1) devuelve true solo si todos los elementos en la submatriz definida por las filas de i0 a i1 y las columnas de j0 a j1 son true. Si al menos uno de esos elementos es false, la función devuelve false.
Complejidad del algoritmo y por qué no es O(n^2)

Para el primer punto, el desafío es hallar un algoritmo que encuentre la posición de algún false en menos de O(n^2). Aquí, el truco está en ser eficientes con nuestra búsqueda. Una estrategia podría ser dividir la matriz en regiones más pequeñas y usar la operación conjunciónSubmatriz para verificar rápidamente si hay algún false en esa región. Esta estrategia se asemeja a la búsqueda binaria, la cual tiene una complejidad de O(log n), pero aplicada en dos dimensiones. Sin embargo, la implementación exacta y su complejidad pueden variar según el enfoque específico.

En el segundo punto, la confusión sobre la complejidad puede surgir al intentar contar los false en la matriz. Si intentas verificar cada elemento individualmente, efectivamente acabarás con una complejidad de O(n^2) porque estar

Revisa tu respuesta y continúa practicando para mejorar.

