.
├── AI-EduPlatform_DefaultOrganization_20240201004529.log
├── AI-EduPlatform.prompt
├── app.log
├── app.yaml
├── ChatChainConfig.json
├── database.py
├── evaluator.py
├── exercise.py
├── index.html
├── interactions.db
├── main.py
├── manual.md
├── meta.txt
├── output.txt
├── PhaseConfig.json
├── __pycache__
│   ├── database.cpython-311.pyc
│   ├── evaluator.cpython-311.pyc
│   └── exercise.cpython-311.pyc
├── requirements.txt
├── RoleConfig.json
└── secrets
    └── OPENAI_API_KEY

3 directories, 20 files
./output.txt
./ChatChainConfig.json
{
    "chain": [{
            "phase": "DemandAnalysis",
            "phaseType": "SimplePhase",
            "max_turn_step": -1,
            "need_reflect": "True"
        },
        {
            "phase": "LanguageChoose",
            "phaseType": "SimplePhase",
            "max_turn_step": -1,
            "need_reflect": "True"
        },
        {
            "phase": "Coding",
            "phaseType": "SimplePhase",
            "max_turn_step": 1,
            "need_reflect": "False"
        },
        {
            "phase": "CodeCompleteAll",
            "phaseType": "ComposedPhase",
            "cycleNum": 10,
            "Composition": [{
                "phase": "CodeComplete",
                "phaseType": "SimplePhase",
                "max_turn_step": 1,
                "need_reflect": "False"
            }]
        },
        {
            "phase": "CodeReview",
            "phaseType": "ComposedPhase",
            "cycleNum": 3,
            "Composition": [{
                    "phase": "CodeReviewComment",
                    "phaseType": "SimplePhase",
                    "max_turn_step": 1,
                    "need_reflect": "False"
                },
                {
                    "phase": "CodeReviewModification",
                    "phaseType": "SimplePhase",
                    "max_turn_step": 1,
                    "need_reflect": "False"
                }
            ]
        },
        {
            "phase": "Test",
            "phaseType": "ComposedPhase",
            "cycleNum": 3,
            "Composition": [{
                    "phase": "TestErrorSummary",
                    "phaseType": "SimplePhase",
                    "max_turn_step": 1,
                    "need_reflect": "False"
                },
                {
                    "phase": "TestModification",
                    "phaseType": "SimplePhase",
                    "max_turn_step": 1,
                    "need_reflect": "False"
                }
            ]
        },
        {
            "phase": "EnvironmentDoc",
            "phaseType": "SimplePhase",
            "max_turn_step": 1,
            "need_reflect": "True"
        },
        {
            "phase": "Manual",
            "phaseType": "SimplePhase",
            "max_turn_step": 1,
            "need_reflect": "False"
        }
    ],
    "recruitments": [
        "Chief Executive Officer",
        "Counselor",
        "Chief Human Resource Officer",
        "Chief Product Officer",
        "Chief Technology Officer",
        "Programmer",
        "Code Reviewer",
        "Software Test Engineer",
        "Chief Creative Officer"
    ],
    "clear_structure": "True",
    "gui_design": "True",
    "git_management": "False",
    "web_spider": "False",
    "self_improve": "False",
    "incremental_develop": "False",
    "with_memory": "False",
    "background_prompt": "ChatDev is a software company powered by multiple intelligent agents, such as chief executive officer, chief human resources officer, chief product officer, chief technology officer, etc, with a multi-agent organizational structure and the mission of 'changing the digital world through programming'."
}./main.py
'''
This is the main file of the educational platform.
'''


import logging
from logging.handlers import RotatingFileHandler

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
handler = RotatingFileHandler('app.log', maxBytes=10000, backupCount=3)
logger.addHandler(handler)


from flask import Flask, render_template, request, redirect, url_for
from exercise import Exercise
from database import Database
from evaluator import Evaluator
app = Flask(__name__)
exercise = Exercise()
database = Database()
evaluator = Evaluator()


@app.route('/submit', methods=['POST'])
def submit():
    response = request.form['response']
    # Log the submission event
    logger.info(f"Exercise submitted by user: {response}")
    database.save_interaction(response)
    evaluated_response = evaluator.evaluate(response)
    return redirect(url_for('index', evaluated_response=evaluated_response))
if __name__ == '__main__':
    app.run()

@app.route('/submit', methods=['POST'])
def index():
    evaluated_response = request.args.get('evaluated_response')
    # Log the access event
    logger.info("Exercise accessed")
    return render_template('index.html', prompt=exercise.get_prompt(), evaluated_response=evaluated_response)
./evaluator.py
import os
import openai
from dotenv import load_dotenv
from exercise import Exercise

# Load environment variables from .env file
load_dotenv()

class Evaluator:
    def __init__(self):
        # Initialize evaluator properties
        self.exercise = Exercise()
        # Load your OpenAI API key from an environment variable
        openai.api_key = os.getenv('OPENAI_API_KEY')

    def evaluate(self, response):
        # Evaluate the response using AI-based machine evaluator
        return self.machine_evaluate(response)

    def machine_evaluate(self, response):
        # Replace placeholder implementation with a call to OpenAI's API
        try:
            # Construct the prompt to send to the API
            prompt = self.construct_prompt(response)
            # Make the API call
            completion = openai.Completion.create(
                engine="text-davinci-003",  # or "gpt-4" based on your preference
                prompt=prompt,
                temperature=0.7,
                max_tokens=150,
                n=1,
                stop=None
            )
            # Extract the text from the response
            evaluated_response = completion.choices[0].text.strip()
            return evaluated_response
        except Exception as e:
            print(f"Error calling OpenAI API: {e}")
            return "Error evaluating response."./database.py
import pymysql
import os



class Database:
    def __init__(self):
        # Example environment variables for database connection details
        db_host = os.environ.get('DB_HOST') # 34.42.138.123
        db_user = os.environ.get('DB_USER') # root
        db_password = os.environ.get('DB_PASSWORD') # 1234
        db_name = os.environ.get('DB_NAME') # interactions - chatbot

        self.connection = pymysql.connect(host=db_host,
                                          user=db_user,
                                          password=db_password,
                                          database=db_name,
                                          cursorclass=pymysql.cursors.DictCursor)
        self.cursor = self.connection.cursor()
        self.create_table()

    # def create_table(self):
    #     self.cursor.execute("CREATE TABLE IF NOT EXISTS interactions (response TEXT)")

    def save_interaction(self, response):
        self.cursor.execute("INSERT INTO interactions (response) VALUES (%s)", (response,))
        self.connection.commit()

    def close(self):
        self.cursor.close()
        self.connection.close()
./PhaseConfig.json
{
  "DemandAnalysis": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "ChatDev has made products in the following form before:",
      "Image: can present information in line chart, bar chart, flow chart, cloud chart, Gantt chart, etc.",
      "Document: can present information via .docx files.",
      "PowerPoint: can present information via .pptx files.",
      "Excel: can present information via .xlsx files.",
      "PDF: can present information via .pdf files.",
      "Website: can present personal resume, tutorial, products, or ideas, via .html files.",
      "Application: can implement visualized game, software, tool, etc, via python.",
      "Dashboard: can display a panel visualizing real-time information.",
      "Mind Map: can represent ideas, with related concepts arranged around a core concept.",
      "As the {assistant_role}, to satisfy the new user's demand and the product should be realizable, you should keep discussing with me to decide which product modality do we want the product to be?",
      "Note that we must ONLY discuss the product modality and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion by replying with only one line, which starts with a single word <INFO>, followed by our final product modality without any other words, e.g., \"<INFO> PowerPoint\"."
    ]
  },
  "LanguageChoose": {
    "assistant_role_name": "Chief Technology Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "According to the new user's task and some creative brainstorm ideas listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Ideas: \"{ideas}\".",
      "We have decided to complete the task through a executable software implemented via a programming language. ",
      "As the {assistant_role}, to satisfy the new user's demand and make the software realizable, you should propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc,).",
      "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words or reasons, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language."
    ]
  },
  "Coding": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Task description: \"{description}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas:\"{ideas}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the new user's demands, you should write one or multiple files and make sure that every detail of the architecture is, in the end, implemented as code. {gui}",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.",
      "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "You will start with the \"main\" file, then go to the ones that are imported by that file, and so on.",
      "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
    ]
  },
  "ArtDesign": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), we will discuss and design many decorative images for GUI decoration. Now, we keep discussing the GUI beautification by listing some functionally independent elements in GUI that are being considered to be decorated by different pictures. For example, ten digits (0-9) in a calculator are functionally independent.",
      "To answer, use the format: \" FILENAME.png: DESCRIPTION\" where \"FILENAME\" is the filename of the image and \"DESCRIPTION\" denotes the detailed description of the independent elements. For example:",
      "'''",
      "button_1.png: The button with the number \"1\" on it.",
      "button_multiply.png: The button with the multiplication symbol (\"*\") on it.",
      "background.png: the background color to decorate the Go game",
      "'''",
      "Now, list all functionally independent elements as much as possible."
    ]
  },
  "ArtIntegration": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), you will incorporate our designed images for GUI decoration. Here are some ready-made high-quality pictures and corresponding descriptions:",
      "{images}",
      "Note that the designed images have a fixed size of 256x256 pixels and the images are located in the same directory as all the Python files; please dynamically scaling these images according to the size of GUI, and use \"self.*\" to avoid displaying-related problems caused by automatic garbage collection. For example:",
      "```",
      "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
      "```",
      "Now, use some or all of the pictures into the GUI to make it more beautiful and creative. Output codes strictly following the required format mentioned above."
    ]
  },
  "CodeComplete": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Unimplemented File:",
      "\"{unimplemented_file}\"",
      "In our software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the complete function of our developed software, you have to implement all methods in the {unimplemented_file} file which contains a unimplemented class. Now, implement all methods of the {unimplemented_file} and all other codes needed, then output the fully implemented codes, strictly following the required format."
    ]
  },
  "CodeReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the new user's task and our software designs: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes:",
      "\"{codes}\"",
      "As the {assistant_role}, to make the software directly operable without further coding, ChatDev have formulated the following regulations:",
      "1) all referenced classes should be imported;",
      "2) all methods should be implemented;",
      "3) all methods need to have the necessary comments;",
      "4) no potential bugs;",
      "5) The entire project conforms to the tasks proposed by the user;",
      "6) most importantly, do not only check the errors in the code, but also the logic of code. Make sure that user can interact with generated software without losing any feature in the requirement;",
      "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "CodeReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
    ]
  },
  "TestErrorSummary": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "According to my test reports, please locate and summarize the bugs that cause the problem."
    ]
  },
  "TestModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify the codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the error summary. Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
    ]
  },
  "EnvironmentDoc": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "The new user's task and our developed codes are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "As the {assistant_role}, you should write a requirements.txt file, which is commonly used in Python projects to specify the dependencies or packages required for the project to run properly. It serves as a way to document and manage the project's dependencies in a standardized format. For example:",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "According to the codes and file format listed above, write a requirements.txt file to specify the dependencies or packages required for the project to run properly."
    ]
  },
  "Manual": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "The new user's task, our developed codes and required dependencies are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Requirements:",
      "\"{requirements}\"",
      "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the software, including introducing main functions of the software, how to install environment dependencies and how to use/play it. For example:",
      "manual.md",
      "```",
      "# LangChain",
      "Building applications with LLMs through composability",
      "Looking for the JS/TS version? Check out LangChain.js.",
      "**Production Support:** As you move your LangChains into production, we'd love to offer more comprehensive support.",
      "Please fill out this form and we'll set up a dedicated support Slack channel.",
      "## Quick Install",
      "`pip install langchain`",
      "or",
      "`conda install langchain -c conda-forge`",
      "## 🤔 What is this?",
      "Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.",
      "This library aims to assist in the development of those types of applications. Common examples of these applications include:",
      "**❓ Question Answering over specific documents**",
      "- Documentation",
      "- End-to-end Example: Question Answering over Notion Database",
      "**🤖 Agents**",
      "- Documentation",
      "- End-to-end Example: GPT+WolframAlpha",
      "## 📖 Documentation",
      "Please see [here](https://python.langchain.com) for full documentation on:",
      "- Getting started (installation, setting up the environment, simple examples)",
      "- How-To examples (demos, integrations, helper functions)",
      "- Reference (full API docs)",
      "- Resources (high-level explanation of core concepts)",
      "```"
    ]
  }
}./exercise.py
'''
This file defines the Exercise class.
'''
class Exercise:
    def __init__(self):
        # Initialize exercise properties
        self.prompt = "Write a Python program to calculate the factorial of a number."
        self.solution = '''
        def factorial(n):
            if n == 0:
                return 1
            else:
                return n * factorial(n-1)
        num = int(input("Enter a number: "))
        print("Factorial of", num, "is", factorial(num))
        '''
    def get_prompt(self):
        # Return the exercise prompt
        return self.prompt
    def get_solution(self):
        # Return the exercise solution
        return self.solution./RoleConfig.json
{
  "Chief Executive Officer": [
    "{chatdev_prompt}",
    "You are Chief Executive Officer. Now, we are both working at ChatDev and we share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "Your main responsibilities include being an active decision-maker on users' demands and other key policy issues, leader, manager, and executor. Your decision-making role involves high-level decisions about policy and strategy; and your communicator role can involve speaking to the organization's management and employees.",
    "Here is a new customer's task: {task}.",
    "To complete the task, I will give you one or more instructions, and you must help me to write a specific solution that appropriately solves the requested instruction based on your expertise and my needs."
  ],
  "Chief Product Officer": [
    "{chatdev_prompt}",
    "You are Chief Product Officer. we are both working at ChatDev. We share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "You are responsible for all product-related matters in ChatDev. Usually includes product design, product strategy, product vision, product innovation, project management and product marketing.",
    "Here is a new customer's task: {task}.",
    "To complete the task, you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs."
  ],
  "Counselor": [
    "{chatdev_prompt}",
    "You are Counselor. Now, we share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "Your main responsibilities include asking what user and customer think and provide your valuable suggestions. ",
    "Here is a new customer's task: {task}.",
    "To complete the task, I will give you one or more instructions, and you must help me to write a specific solution that appropriately solves the requested instruction based on your expertise and my needs."
  ],
  "Chief Technology Officer": [
    "{chatdev_prompt}",
    "You are Chief Technology Officer. we are both working at ChatDev. We share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "You are very familiar to information technology. You will make high-level decisions for the overarching technology infrastructure that closely align with the organization's goals, while you work alongside the organization's information technology (\"IT\") staff members to perform everyday operations.",
    "Here is a new customer's task: {task}.",
    "To complete the task, You must write a response that appropriately solves the requested instruction based on your expertise and customer's needs."
  ],
  "Chief Human Resource Officer": [
    "{chatdev_prompt}",
    "You are Chief Human Resource Officer. Now, we are both working at ChatDev and we share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "You are a corporate officer who oversees all aspects of human resource management and industrial relations policies, practices and operations for an organization. You will be involved in board staff recruitment, member selection, executive compensation, and succession planning. Besides, You report directly to the chief executive officer (CEO) and am a member of the most senior-level committees of a company (e.g., executive committee or office of CEO).",
    "Here is a new customer's task: {task}.",
    "To complete the task, you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs."
  ],
  "Programmer": [
    "{chatdev_prompt}",
    "You are Programmer. we are both working at ChatDev. We share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "You can write/create computer software or applications by providing a specific programming language to the computer. You have extensive computing and coding experience in many varieties of programming languages and platforms, such as Python, Java, C, C++, HTML, CSS, JavaScript, XML, SQL, PHP, etc,.",
    "Here is a new customer's task: {task}.",
    "To complete the task, you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs."
  ],
  "Code Reviewer": [
    "{chatdev_prompt}",
    "You are Code Reviewer. we are both working at ChatDev. We share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "You can help programmers to assess source codes for software troubleshooting, fix bugs to increase code quality and robustness, and offer proposals to improve the source codes.",
    "Here is a new customer's task: {task}.",
    "To complete the task, you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs."
  ],
  "Software Test Engineer": [
    "{chatdev_prompt}",
    "You are Software Test Engineer. we are both working at ChatDev. We share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "You can use the software as intended to analyze its functional properties, design manual and automated test procedures to evaluate each software product, build and implement software evaluation test programs, and run test programs to ensure that testing protocols evaluate the software correctly.",
    "Here is a new customer's task: {task}.",
    "To complete the task, you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs."
  ],
  "Chief Creative Officer": [
    "{chatdev_prompt}",
    "You are Chief Creative Officer. we are both working at ChatDev. We share a common interest in collaborating to successfully complete a task assigned by a new customer.",
    "You direct ChatDev's creative software's and develop the artistic design strategy that defines the company's brand. You create the unique image or music of our produced software's and deliver this distinctive design to consumers to create a clear brand image which is a fundamental and essential work throughout the company.",
    "Here is a new customer's task: {task}.",
    "To complete the task, you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs."
  ]
}./requirements.txt
Flask==1.1.2
openai>=0.10.2

./manual.md
# Educational Platform User Manual

## Introduction

Welcome to the user manual for the Educational Platform developed by ChatDev. This platform allows students to complete exercises online and receive immediate feedback through an AI-based machine evaluator. The platform also stores all interactions in a database for future reference. This manual will guide you through the installation process and provide instructions on how to use the platform effectively.

## Table of Contents

1. Installation
2. Usage
3. Exercise Completion
4. Viewing Feedback
5. Database Interactions

## 1. Installation

To install the Educational Platform, follow these steps:

1. Ensure that you have Python installed on your system. If not, download and install Python from the official website (https://www.python.org/).

2. Clone the repository containing the platform's source code using the following command:

   ```
   git clone <repository_url>
   ```

3. Navigate to the project directory using the command line.

4. Install the required dependencies by running the following command:

   ```
   pip install -r requirements.txt
   ```

5. Once the dependencies are installed, you are ready to use the Educational Platform.

## 2. Usage

To use the Educational Platform, follow these steps:

1. Open a command prompt or terminal and navigate to the project directory.

2. Run the following command to start the platform:

   ```
   python main.py
   ```

3. Open a web browser and enter the following URL:

   ```
   http://localhost:5000
   ```

4. You will see the exercise prompt displayed on the webpage. Enter your response in the provided text field and click the "Submit" button.

5. The platform will process your response using the AI-based machine evaluator and provide immediate feedback.

6. You can repeat the exercise completion process as many times as needed.

## 3. Exercise Completion

To complete an exercise on the Educational Platform, follow these steps:

1. Access the platform using the steps mentioned in the "Usage" section.

2. Read the exercise prompt displayed on the webpage.

3. Write your solution to the exercise in the provided text field.

4. Click the "Submit" button to submit your response.

5. The platform will process your response and provide immediate feedback based on the AI-based machine evaluator.

6. Review the feedback provided and make any necessary adjustments to your solution.

7. Repeat the exercise completion process until you are satisfied with your solution.

## 4. Viewing Feedback

After submitting your response to an exercise, the Educational Platform will provide immediate feedback. To view the feedback, follow these steps:

1. Access the platform using the steps mentioned in the "Usage" section.

2. Complete an exercise by following the steps mentioned in the "Exercise Completion" section.

3. Once you submit your response, the platform will process it and display the evaluated response on the webpage.

4. The evaluated response will indicate whether your solution is correct or incorrect.

5. Review the evaluated response to understand the feedback provided by the AI-based machine evaluator.

6. Use the feedback to improve your understanding and skills in solving similar exercises.

## 5. Database Interactions

The Educational Platform stores all interactions, including student inputs and AI-generated outputs, in a database. To interact with the database, follow these steps:

1. Access the platform using the steps mentioned in the "Usage" section.

2. Complete an exercise by following the steps mentioned in the "Exercise Completion" section.

3. Once you submit your response, the platform will store the interaction in the database.

4. To view the stored interactions, you can access the database directly using a SQLite database viewer or execute SQL queries programmatically.

5. The interactions table in the database contains a single column named "response" that stores the student's response for each exercise.

6. You can use the stored interactions for analysis, tracking progress, or any other purposes related to student learning.

Congratulations! You have successfully installed and learned how to use the Educational Platform. Enjoy completing exercises and improving your skills with immediate feedback../meta.txt
Task:
Develop an educational platform where students can complete exercises online. The system should allow students to submit responses, which are then processed and evaluated using an AI-based machine evaluator. The platform will store all interactions in a database, including student inputs and AI-generated outputs. The system should present the evaluated response back to the student for immediate feedback. This project aims to enhance learning experiences by integrating AI evaluation tools for educational exercises.

Config:
ChatEnvConfig.with_memory: False
ChatEnvConfig.clear_structure: True
ChatEnvConfig.git_management: False
ChatEnvConfig.gui_design: True
ChatEnvConfig.incremental_develop: False
ChatEnvConfig.background_prompt: ChatDev is a software company powered by multiple intelligent agents, such as chief executive officer, chief human resources officer, chief product officer, chief technology officer, etc, with a multi-agent organizational structure and the mission of 'changing the digital world through programming'.


Roster:
Chief Executive Officer, Counselor, Chief Human Resource Officer, Chief Product Officer, Chief Technology Officer, Programmer, Code Reviewer, Software Test Engineer, Chief Creative Officer

Modality:
web application

Ideas:


Language:
 Python

Code_Version:
7.0

Proposed_images:
0

Incorporated_images:
0

