Ejercicio

Lee el ejercicio cuidadosamente y escribe tu respuesta en el espacio provisto abajo.
Se tiene una matriz booleana A
de n×n y una operación conjunciónSubmatriz que toma O(1) y que dados 4 enteros i0,i1,j0,j1 devuelve la conjunción de todos los elementos en la submatriz que toma las filas i0 hasta i1 y las columnas j0 hasta j1. Formalmente: conjunciónSubmatriz(i0,i1,j0,j1)=⋀i0≤i≤i1,j0≤j≤j1A[i,j]

    Dar un algoritmo que tome tiempo estrictamente menor que O(n2)

que calcule la posición de algún false, asumiendo que hay al menos uno. Calcular y justificar la complejidad del algoritmo.
Modificar el algoritmo anterior para que cuente cuántos false hay en la matriz. Asumiendo que hay a lo sumo 5 elementos false en toda la matriz, calcular y justificar la complejidad del algoritmo.
Si obtuvo una complejidad O(n2)
en el punto anterior, mejore el algoritmo y/o el cálculo para obtener una complejidad menor. 


%%%%%%%%%%%%


si la conjuncion tiene al menos un cero, ya se que dentro hay un cero, y puedo partir en mitades sucesivamente.
Para calcular la complejidad, ... estoy un poco perdido...
siento que al partir en mitades, tendria que haber una relacion de 2^n... pero no se en que ecuacion de complejidad se traduciria esa intuicion y como formalizarla?


%%%%%%%%%%%%


Retroalimentación del Ejercicio
Tu Feedback

¡Hola! Me alegra mucho que estés abordando este desafío con tanto entusiasmo. Veo que ya has captado una idea muy valiosa sobre cómo abordar el problema: la estrategia de dividir la matriz en mitades sucesivas para encontrar un elemento false. Esta técnica se asemeja a la búsqueda binaria, que es una herramienta poderosa en algoritmos por su eficiencia. Tu intuición sobre la relación de (2^n) está en el camino correcto, pero vamos a clarificar cómo se traduce esto en términos de complejidad algorítmica.

Para el primer punto, donde queremos encontrar la posición de algún false, la idea de dividir la matriz en cuartos (o mitades, dependiendo de cómo elijas implementarlo) es una estrategia excelente. Cada vez que divides la matriz, reduces el espacio de búsqueda a la mitad (o a un cuarto), lo cual es la esencia de la búsqueda binaria. Sin embargo, hay un detalle clave a considerar: en cada nivel de división, no estás realizando una única operación, sino que potencialmente tienes que verificar varias submatrices para encontrar un false.

Para formalizar la complejidad, vamos a pensar en términos de la cantidad de operaciones que realizas. Supongamos que divides la matriz en cuartos. En el peor caso, podrías tener que verificar los cuatro cuartos antes de encontrar un false. Esto te lleva a realizar varias operaciones de conjunciónSubmatriz en cada nivel de división.

Aunque cada operación de conjunciónSubmatriz toma (O(1)), el número de veces que necesitas dividir la matriz para llegar a una submatriz de tamaño 1 (donde directamente verificarías si el elemento es false o no) es lo que contribuye a la complejidad total. Si divides la matriz en cuartos, el número de niveles de división que necesitas es (O(\log n)), ya que estás reduciendo el problema a la mitad en cada dimensión en cada paso.

Ahora, para el segundo punto, contar cuántos false hay en la matriz con
