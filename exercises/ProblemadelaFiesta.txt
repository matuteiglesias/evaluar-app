\item\label{ej:ind set} El problema de la fiesta consiste en determinar un conjunto de invitados que no tengan conflictos entre sí y que sea de cardinalidad máxima.  Formalmente, dado un conjunto $V$ de posibles invitados y un conjunto $E$ de conflictos, formados por pares no ordenados de $V$, queremos encontrar un subconjunto $S \subseteq V$ de cardinalidad máxima entre aquellos que cumplen que $\{v,w\} \not\in E$ para todo par $v,w \in S$. Por ejemplo, si $S = \{1,2,3,4,5\}$ y $E = \{ \{1,2\}, \{2, 3\}, \{3, 4\}, \{4,5\} \}$, entonces una solución es $S = \{1,3,5\}$, ya que no se puede invitar a ningún conjunto de $4$ personas.  Vamos a suponer que los posibles invitados se representan con el conjunto $V = \{1, \ldots, n\}$ para algún $n \geq 0$ (el caso $n=0$ es válido y representa el conjunto $V = \emptyset$).
\label{ejercicioFiesta}

 \begin{enumerate}[label=$\alph*)$,ref=$\alph*)$]
  \item Decimos que $S \subseteq \mathbb{N}$ y $W \subseteq \mathbb{N}$ son \emph{compatibles} cuando $S \subseteq V$ es un conjunto posible de invitados y ningún elemento de $W \subseteq V \setminus S$ tiene un conflicto con algún elemento de $S$.  En el ejemplo anterior, $S = \{1\}$ y $W = \{4, 5\}$ son compatibles pero $S = \{1,4\}$ y $W = \{2\}$ no lo son.  Sea $\mathcal{V}$ el conjunto de subconjuntos de $V$.  Escribir una función recursiva $\Fiesta \colon \mathcal{V} \times \mathcal{V} \to \mathcal{V}$ tal que, dados $S$ y $W$ compatibles, $\Fiesta(S, W)$ retorne un conjunto de invitados de máxima cardinalidad que contenga a $S$.  (Notar que la llamada recursiva debe garantizar la compatibilidad).  \textbf{Ayuda:} considerar dos posibilidades: no invitar a $w \in W$, o invitar a $w \in W$ y no invitar a nadie que tenga un conflicto con $w$.
  \label{fiestaFormRec}

  \item En base a \ref{fiestaFormRec}, implementar un algoritmo recursivo de \emph{backtracking} para resolver el problema de la fiesta basado en las siguientes ideas:
  \begin{itemize}
   \item cada solución parcial es un conjunto $S \subseteq V$ que no contiene invitados con conflictos.
   \item a cada nodo del árbol de \textit{backtracking} se le asocia un conjunto $W \subseteq V$ compatible con $S$ de posibles invitados.
   \item para la extensión, se consideran dos posibilidades: o bien no se invita a $w \in W$ o bien se invita a $w$ y se eliminan de $W$ todos los otros elementos que estén en conflicto con $w$.
  \end{itemize}
  \label{fiestaAlgo1}
  \item Escribir los tres primeros niveles del árbol de \textit{backtracking} resultante de la implementación anterior.
  \item Describir una regla de optimalidad para poder podar el árbol e incluirla en la implementación de \ref{fiestaAlgo1}.
  \item\label{ej:ind set:dp} ¿Se le ocurre una forma de escribir una función recursiva $\FiestaPD(V, S, i)$ que, en analogía con el inciso~\ref{ej:subset sum dp:recursion} del Ejercicio~\ref{ej:subset sum dp}, determine el conjunto de invitados óptimo que incluya a $S \subseteq \{1, \ldots, i-1\}$ y que se obtenga agregando sólo invitados de $\{i, \ldots, n\}$? ¿Cuál es el problema?  ¿Se le ocurre alguna manera de escapar a este problema?
  \item Considerando la función $\Fiesta$ (definida en \ref{fiestaFormRec}) y el inciso anterior, observar que la cantidad posible de instancias es $\Omega(2^n)$.  Concluir que la función $\Fiesta$ no tiene la propiedad de superposición de subproblemas para el caso general del problema de la fiesta.
 \end{enumerate}
 
