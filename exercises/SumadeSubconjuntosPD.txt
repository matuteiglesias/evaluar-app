\begin{enumerate}[resume*]

\item\label{ej:subset sum dp} En este ejercicio vamos a resolver el problema de suma de subconjuntos usando la técnica de programación dinámica.

 \begin{enumerate}[label=$\alph*)$,ref=$\alph*)$]
  \item\label{ej:subset sum dp:recursion} Sea $n = |C|$ la cantidad de elementos de $C$.  Considerar la siguiente función recursiva $\SubsetSumPD_C \colon \{0,\ldots, n\} \times \{0, \ldots, k\} \to \{V,F\}$ (donde $V$ indica verdadero y $F$ falso) tal que:
  \begin{displaymath}
   \SubsetSumPD_C(i, j) = \begin{cases}
    j = 0 & \text{si $i = 0$} \\
    \SubsetSumPD_C(i-1,j) & \text{si $i \neq 0 \land C[i] > j$} \\
    \SubsetSumPD_C(i-1, j) \lor \SubsetSumPD_C(i-1, j- C[i]) & \text{si no}
   \end{cases}
  \end{displaymath}
  Convencerse de que esta es una definición equivalente de la función $\SubsetSum$ del inciso~\ref{sumaDeSubconjuntosFormRecBT} del Ejercicio~\ref{ejercicioSumaDeSubconjuntos}, observando que $\SubsetSum(C, k) = \SubsetSumPD_C(n, k)$.  En otras palabras, convencerse de que el algoritmo del inciso \ref{sumaDeSubconjuntosAlgoBT} es una implementación por \textit{backtracking} de la función $\SubsetSumPD_C$.  Concluir, pues, que $\mathcal{O}(2^n)$ llamadas recursivas de $\SubsetSumPD_C$ son suficientes para resolver el problema.
  \item Observar que, como $C$ no cambia entre llamadas recursivas, existen $\mathcal{O}(nk)$ posibles entradas para $\SubsetSumPD_C$. Concluir que, si $k \ll 2^n/n$, entonces necesariamente algunas instancias de $\SubsetSumPD_C$ son calculadas muchas veces por el algoritmo del inciso \ref{sumaDeSubconjuntosAlgoBT}. Mostrar un ejemplo donde se calcule varias veces la misma instancia.
  \item Considerar la estructura de memoización (i.e., el diccionario) $M$ implementada como una matriz de $(n+1) \times (k+1)$ tal que $M[i,j]$ o bien tiene un valor indefinido $\bot$ o bien tiene el valor $\SubsetSumPD_C(i, j)$, para todo $0 \leq i \leq n$ y $0 \leq j \leq k$.  Convencerse de que el siguiente algoritmo \emph{top-down} mantiene un estado válido para $M$ y computa $M[i, j] = \SubsetSumPD_C(i, j)$ cuando se invoca $\SubsetSumPD_C(i, j)$.

  \begin{enumerate}
   \item Inicializar $M[i,j] = \bot$ para todo $0 \leq i \leq n$ y $0 \leq j \leq k$.
   \item $\SubsetSumAlg(C, i, j)$: // implementa $\SubsetSum(\{c_1, \ldots, c_i\}, j) = \SubsetSumPD_C(i,  j)$ usando memoización
   \item ~~~~Si $j < 0$, retornar \textbf{falso}
   \item ~~~~Si $i = 0$, retornar $(j = 0)$
   \item ~~~~Si $M[i, j] = \bot$:
   \item ~~~~~~~~Poner $M[i, j] = \SubsetSumAlg(C, i-1, j) \lor \SubsetSumAlg(C, i-1, j - C[i])$
   \item ~~~~Retornar $M[i, j]$
  \end{enumerate}

  \item Concluir que $\SubsetSumAlg(C, n, k)$ resuelve el problema.  Calcular la complejidad y compararla con el algoritmo $\SubsetSumAlg$ del inciso \ref{sumaDeSubconjuntosAlgoBT} del Ejercicio \ref{ejercicioSumaDeSubconjuntos}. ¿Cuál algoritmo es mejor cuando $k \ll 2^n$?  ¿Y cuándo $k \gg 2^n$?

  \item Supongamos que queremos computar todos los valores de $M$.  Una vez computados, por definición, obtenemos que
  \begin{displaymath}
   M[i,j] \stackrel{\rm def}{=} \SubsetSumPD_C(i, j) \stackrel{\SubsetSumPD}{=} \SubsetSumPD_C(i-1, j) \lor \SubsetSumPD_C(i-1, j-C[i]) \stackrel{\rm def}{=} M[i-1, j] \lor M[i-1, j-C[i]]
  \end{displaymath}
  cuando $i > 0$, asumiendo que $M[i-1, j-C[i]]$ es falso cuando $j-C[i] < 0$.  Por otra parte, $M[0, 0]$ es verdadero, mientras que $M[0, j]$ es falso para $j > 0$.  A partir de esta observación, concluir que el siguiente algoritmo \emph{bottom-up} computa $M$ correctamente y, por lo tanto, $M[i, j]$ contiene la respuesta al problema de la suma para todo $\{c_1, \ldots, c_i\}$ y $j$.

  \begin{enumerate}
   \item $\SubsetSumAlg(C, k)$: // computa $M[i,j]$ para todo $0 \leq i \leq n$ y $0 \leq j \leq k$.
   \item ~~~~Inicializar $M[0,j] := (j = 0)$ para todo $0 \leq j \leq k$.
   \item ~~~~Para $i = 1, \ldots, n$ y para $j = 0, \ldots, k$:
   \item ~~~~~~~~Poner $M[i, j] := M[i-1, j] \lor (j-C[i] \geq 0 \land M[i-1, j-C[i]])$
  \end{enumerate}
  \item (Opcional) Modificar el algoritmo \textit{bottom-up} anterior para mejorar su complejidad espacial a $O(k)$.
  \item (Opcional) Demostrar que la función recursiva del inciso~\ref{ej:subset sum dp:recursion} es correcta.  \textbf{Ayuda:} demostrar por inducción en $i$ que existe algún subconjunto de $\{c_1, \ldots, c_i\}$ que suma $j$ si y solo si $\SubsetSumPD_C(i, j) = V$.
 \end{enumerate}

